<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Goalkeeper]]></title>
  <subtitle><![CDATA[一份耕耘一份收获]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://walk-code.github.io/"/>
  <updated>2018-01-07T02:51:20.736Z</updated>
  <id>http://walk-code.github.io/</id>
  
  <author>
    <name><![CDATA[walk-code]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://walk-code.github.io/2018/01/07/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%BC%AB%E5%B1%95%E7%9A%84%E6%84%9F%E5%8F%97/"/>
    <id>http://walk-code.github.io/2018/01/07/第一次参加漫展的感受/</id>
    <published>2018-01-07T02:51:20.863Z</published>
    <updated>2018-01-07T02:51:20.736Z</updated>
    <content type="html"><![CDATA[<p>title: 第一次参加漫展的感受<br>date: 2018-01-07 10:47:47</p>
<h2 id="tags:_随笔">tags: 随笔</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>title: 第一次参加漫展的感受<br>date: 2018-01-07 10:47:47</p>
<h2 id="tags:_随笔">tags: 随笔</h2>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[（转）PHP程序员的技术成长规划]]></title>
    <link href="http://walk-code.github.io/2017/12/24/%EF%BC%88%E8%BD%AC%EF%BC%89PHP%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%8A%80%E6%9C%AF%E6%88%90%E9%95%BF%E8%A7%84%E5%88%92/"/>
    <id>http://walk-code.github.io/2017/12/24/（转）PHP程序员的技术成长规划/</id>
    <published>2017-12-24T10:04:48.000Z</published>
    <updated>2018-01-07T04:05:11.193Z</updated>
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2017/12/24/5a3f7d64c6c6e.jpg" alt="image">  </p>
<h2 id="前言">前言</h2><p> 按照了解的很多PHP/LNMP程序员的发展轨迹，结合个人经验体会，抽象出很多程序员对未来的迷茫，特别对技术学习的盲目和慌乱，简单梳理了这个每个阶段PHP程序员的技术要求，来帮助很多PHP程序员做<br>对照设定学习成长目标。  </p>
<p>本文安装不去主流技术做了一个基本的梳理，整个是假设PHP程序员不是基础非常扎实的情况进行的设定，并且所有设定都非常具体明确清晰，可能会让人觉得不适，请理解仅代表一家之言。（未来技术变化不在讨论范围）<br><a id="more"></a><br><a href="https://mp.weixin.qq.com/s/yWihmHdm7hnaMq-Q2Ym_jw" target="_blank" rel="external">传送门</a></p>
<h2 id="第一阶段：基础阶段（基础PHP程序员）"><strong>第一阶段：基础阶段（基础PHP程序员）</strong></h2><p><strong>重点：</strong> 把LNNM搞熟练（核心是安装配置借本操作）<br><strong>目标：</strong> 能够完成基本的LNMP系统安装，简单配置维护；能够做基本的简单系统的PHP开发；能够在PHP中型系统中支持某个PHP功能模块的开发。<br>时间： 完成本阶段的时间因人而异，有的成长快半年一年就过了，成长慢的两三年也有。  </p>
<p><strong>1.Linux</strong><br>基本命令、操作、启动、基本服务配置（包括npm安装文件，各种服务配置等）；会写简单的shell脚本和awk/sed脚本命令等。  </p>
<p><strong>2.Nginx</strong><br>做到能够安装配置nginx+php，知道基本的nginx核心配置选项，知道server/fastcgi_pass/access_log等基础配置，目标是能够让nginx+php_fpm顺利工作。  </p>
<p><strong>3.MySql</strong><br>会自己搭建mysql，知道基本的mysql配置选项；知道innodb和myisam的区别，知道针对InnoDB和MyISAM两个引擎的的不同配置选项；知道基本的两个引擎的差异和选择上面的区别；能够纯手工便宜搭建一个MySQL数据库并且配置好编码等正常稳定运行；核心主旨是能够搭建一个可运行的MySQL数据库。  </p>
<p><strong>4.PHP</strong><br>基本语法数组、字符串、数据库、XML、Socket、GD/ImageMgk图片处理等等；熟悉各种跟MySQL操作链接的api（mysql/mysqli/PDO）,知道各种编码问题的解决；知道常规熟练使用的PHP框架（ThinkPHP、Zendframework、Yii、Yaf、Laravel等）;了解基本MVC的运行机制和为什么这么做，稍微知道不同的PHP框架之间的区别；<br>能快速学习一个MVC框架。能够知道开发公众的文件目录组织，有基本的良好的代码结构和风格，能够完成小系统的开发和中型系统中某个模块的开发工作。  </p>
<p><strong>5.前端</strong><br>如果时间条件允许，可以适当学习下HTML/CSS/JS等相关知识，知道什么web标准，div+css的web/wap页面模式，知道HTML5和HTML4的区别；了解一些基本的前端知识和JS框架（JQuery之类的）；了解一些借本的JavaScript编程知识；（本项不是必须项，如果有时间，稍微了解一下是可以的，不过不建议作为重点，除非个人有强烈兴趣）  </p>
<p><strong>6.系统设计：</strong><br>能够完成小型系统的基本设计，包括简单的数据库设计，能够完成基本的：浏览器-&gt;Nginx+PHP-&gt;数据库架构的设计开发工作；能够支撑每天几十万到数百万流量网站的开发维护工作；  </p>
<h2 id="第二阶段"><strong>第二阶段</strong></h2><p><strong>重点：</strong> 提高对LNMP的技能，能够更全面的对LNNP有熟练的应用。<br><strong>目标：</strong> 能够随时随地的搭建好LNMP环境，快速完成常规配置；能够追查大部分遇到的开发和线上环境的问题；能够独立承担中型系统的架构和开发工作；能够在大型系统中承担某个中型木块的开发工作；  </p>
<p><strong>1.Linux</strong><br>在第一阶段的基础上面，能够流畅的使用Shell脚本来完成很多自动化的工作；awk/sed/perl也操作的不错，能够完成很多文本处理和数据统计等工作；基本能够安装大部分非特殊的Linux程序（包括各种库、包、第三方依赖等等，比如MongoDB/Redis/Sphinx/Luncene/SVN之类的）；了解基本的Linux服务，知道如何查看Linux的性能指标数据，知道基本的Linux下面的问题跟踪等。  </p>
<p><strong>2.Nginx</strong><br>在第一阶段的基础上面，了解复杂一些的Nginx配置：包括多核配置、event、proxy<em>pass、sendfile/tcp</em>*配置，知道超时等相关配置和性能影响；知道nginx除了web server，还能够承担代理服务器、反向静态服务器等配置；知道基本的nginx配置调优；知道如何配置权限，编译一个nginx扩展到nginx;知道基本的nginx运行原理（master/worker机制、cpool），知道为什么nginx性能比apache性能好等知识；  </p>
<p><strong>3.MySQL/MongoDB</strong><br>在第一阶段的基础上面，在MySQL开发方面，掌握很多小技巧，包括SQL优化（group by/order/rand优化等）；除了能够搭建MySQL,还能够冷热备份MySQL数据，还知道影响innodb/myisam性能的配置选项（比如key_buffer/query_cache/sort_buff/innodb_buff_pool_size/innodb_flush_log_attrx_commit等），mysql主从同步的环境，知道各个binlog_format的区别；知道MySQL的性能追查，包括show_log/explain等，还能<br>够知道基本的索引建立处理等知识；原理方面了解基本的MySQL的架构（Server+储存引擎），知道基本的InnoDB/MyISAM索引储存结构和不同（聚簇索引，B树）；知道基本的InnoDB事务处理机制；了解大部分MySQL异常情况的处理方案（或者知道哪里找到处理方案）。条件允许的情况，建议了解一下NoSQL的代表MongoDB,知道基本的PHP与MongoDB的结合开发。  </p>
<p><strong>4.Redis/Memcached:</strong><br>在大部分中型系统里面一定会涉及到缓存处理，所以一定要了解基本的缓存；知道Memcached和Redis的异同和应用场景，能够独立安装Redis\Memcached,了解Memcached的一些基本特性和限制，比如最大的value,知道什么场景应用什么类型，了解Redis的事务等等。原理部分，能够大概了解Memcached的内存结构（slab机制），redis就了解常用的数据类型的底层实现储存结构（SDS/链表/SkipList/HashTable）等等，顺便了解一下Redis事务、<br>RDB、AOF等机制更好。  </p>
<p><strong>5.PHP</strong><br>除了第一阶段的能力，安装配置方面能够随意安装PHP和各种第三方扩展的编译安装配置；了解php-fpm的大部分配置选项的含义（如max_request/max_children/request_terminate_timeout之类的影响性能的配置），知道mod_php/fastcgi的区别；在PHP方面已经能够熟料各种基础技术，还包括各种深入些的PHP，包括对PHP面向对象的深入理解/SPL/语法层面的特殊特性比如反射之类的；在框架方面已阅读过最少一个以上常规PHP MVC框架的代码了，知道基本PHP框架内部实现机制和设计思想；<br>在PHP开发中已经能熟练使用常规的设计模式来应用开发（抽象工厂/单例/观察者/命令链/策略/适配器等模式）；建议开发自己的PHP MVC框架来充分让开发自由化，让自己深入理解MVC模式，也让自己能够在业务开发里快速升级；熟悉PHP的各种代码优化方法，熟悉大部分PHP安全方面问题的解决处理；熟悉基本的PHP执行的机制原理（Zend引擎/扩展基本工作机制）；</p>
<p><strong>6.C/C++</strong><br>开始涉猎一定的C/C++语言，能够写基本的C/C++代码，对基本的C/C++语法熟悉（指针、数组操作、字符串、常规标准API）和数据结构（链表、树、哈希、队列）有一定的熟悉下；对Linux下的C语言开发有基本的了解概念，会简单的makefile文件编写，能够使用简单的GCC/GDB的程序编译简单调试工作；对基本的网络编程有大概了解。（本项是为了向更高层次打下基础）  </p>
<p><strong>7.前端</strong><br>在第一阶段的基础上面，熟悉基本的HTTP协议（协议代码200/300/400/500，基本的HTTP交互头）；条件允许，可以在深入写出稍微优雅的HTML+CSS+JavaScript,或者能够大致简单使用某些前端框架（jQuery/YUI/ExJS/RequireJS/BootStrap之类）；如果条件允许，可以深入学习JavaScript编辑，比如闭包机制，DOM处理；再深入些可以读读jQuery源码做深入学习。（本项不做重点学习，除非对前端有兴趣）  </p>
<p><strong>8.系统设计</strong><br>能够设计大部分中型系统的网站架构、数据库、基本PHP框架选型；性能测试排查处理；能够完成类似：浏览器-&gt;CDN(Squid)-&gt;Nginx-&gt;PHP-&gt;缓存-&gt;数据库 结构网站的基本设计开发维护；能够支撑每天百万到千万流量基本网站的开发维护工作；  </p>
<h2 id="第三阶段：高级阶段（高级PHP程序员）"><strong>第三阶段：高级阶段（高级PHP程序员）</strong></h2><p><strong>重点：</strong> 除了基本的LNMP程序，还能够在某个方向或领域有深入学习。（纵深维度发展）<br><strong>目标：</strong>  除了能够完成基本的PHP业务开发，还能够解决大部分深入复杂的技术问题，并且可以独立设计完成中大型的系统设计和开发工作；自己能够孤立hold深入某个技术方向，在这块比较专业。（不如在MySQL、Nginx、PHP、Redis等等任一方向深入研究）  </p>
<p><strong>1.Linux:</strong><br>除了第二阶段的能力，在Linux下面除了常规的操作和性能监控跟踪，还能够使用很多高级复杂的命令完成工作（watch/tcpdump/starce/ldd/ar等）;在shell脚本方面，已经能够编写比较复杂的shell脚本（超过500行）来协助完成很多包括备份、自动化处理、监控等工作的shell；对awk/sed/perl等应用已经如火纯青，能够随意操作控制处理文本统计分析各种复杂格式的数据；对Linux内部机制有一些了解，对内核模块加载，启动错误处理等等有个基本的处理；同时对以西其他相关的东西也了解，不如NFS、磁盘管理等等；  </p>
<p><strong>2.Nginx:</strong><br>在第二阶段的基础上面，已经能够把Nginx操作的很熟练，能够对Nginx进行更深入的运维工作，比如监控、性能优化、复杂问题处理等等；看个人兴趣，更多方面可以考虑侧重在关于Nginx工作原理部分的深入学习，主要表现在阅读源码开始，比如具体的master/worker工作机制，Nginx内部的事件处理，内存管理等等；同时可以学习Nginx扩展的开发，可以定制一些自己私有的扩展；同时可以对Nginx+Lua有一定程度的了解，看看是否可以结合应用出更好模式；这个阶段的要求是对Nginx原理的深入理解，可以考虑成为Nginx方向深入专业者。  </p>
<p><strong>3.MySQL/MongoDB:</strong><br>在第二阶段的基础上面，在MySQL应用方面，除了之前的基本SQL优化，还能够在完成一些复杂操作，比如大批量数据的导入导出，线上大批量数据的更改表结构或者增删碎银字段等等高危操作；除了安装配置，已经能够处理更多复杂的MySQL的问题，比如各种问题的追查，主从同步延迟问题的解决、跨机房同步数据方案、MySQL高可用结构等都有涉及了解；对MySQL应用层面，对MySQL的核心关键技术比较熟悉，比如事务机制（隔离级别、锁等）、对触发器、分区等技术有一定了解和应用；对MySQL性能方面，有包括磁盘优化（SAS迁移到SSD）、服务器优化（内存、服务器本身配置）、<br>除了第二阶段其他核心性能优化选项（innodb_log_buffer_size/back_log/table_open_cache/thread_cache_size/innodb_lock_wait_timeout等）、连接池软件选择应用、对show*（show status/show profile）类的操作语句有深入了解，能够完成大部分的性能问题追查；MySQL备份技术的深入熟悉，包括灾备还原、对Binlog的深入理解，冷热备份，多IDC备份等；在MySQL原理方面，有更多了解，比如对MySQL的工作机制开始阅读部分源码，比如对主从同步（复制）技术的源码学习，或者对某个储存引擎（MyISAM/InnoDB/TokuDB）等等的源码学习理解，如果条件允许，可以参考CSV引擎开发自己简单的储存引擎<br>来保存一些数据，增强对MySQL的理解；在这个过程，如果自己有兴趣，也可以考虑望DBA方向发展。MongoDB层面，可以考虑比如说在写少读多的情况开始在线上应用MongoDB，或者是做一些线上的数据分析处理的操作，具体场景可以按照工作来，不过核心是要更好的深入理解RMDBS和NoSQL的不同场景下面的应用，如果条件或者兴趣允许，可以开始深入学习一些MongoDB的工作机制。  </p>
<p><strong>4.Redis/Memcached:</strong><br>在第二阶段的基础上面，能够更深入的应用和学习。因为Memcached不是特别复杂，建议可以把源码进行阅读，特别是内存管理部分，方便深入理解；Redis部分，可以多做一些复杂的数据结构和应用（zset来做排行榜排序操作/事务处理用来保证原子性在秒杀类场景应用之类的使用操作）；多设计aof等同步机制的学习应用，设计一个高可用的Redis应用架构和集群；建议可以深入的学习一下Redis的源码，把在第二阶段积累的知识都可以应用上，特别可以阅读一下包括核心事件管理、内存管理、内部核心数据结构等补充学习了解一下，如兴趣允许，可以成为一个Redis方面非常专业的使用者。  </p>
<p><strong>5.PHP</strong><br>作为基础核心技能，我们在第二阶段的基础上面，需要有更深入的学习和应用，从基本代码应用上面来说，能够解决在PHP开发中遇到95%的问题，了解大部分PHP的技巧；对大部分的PHP框架能够迅速在一天内上手使用，并且了解各个主流PHP框架的优缺点，能够迅速方便项目开发中做结束选型；在配置方面，除了常规第二阶段会的知识，会了解一些比较偏门的配置选项（php auto_prepend_file/auto_append_file）,包括扩展中的一些复杂高级配置和原理（比如memcached扩展配置中的memcache.hash_strategy\apc扩展配置中的apc_mmap_file_mask/apc.slam_defense/apc.file_update_protection之类的）；对PHP的工作机制比较了解，包括<br>包括php-fpm工作戒指（比如php-fpm在不同配置机器下面开启进程数量计算已经原理），对zend引擎有基本熟悉（vm/gc/stream处理），阅读过基本的PHP内核源码（或者阅读过先骨干文章），对PHP内部机制的大部分核心数据结构（基础类型/Array/Object）实现有了解，对于核心基础结构（zval/hashtable/gc）有深入学习了解；能够进行基本的PHP扩展开发，了解一些扩展开发的中高知识（minit/rinit等），熟悉php跟apache/nginx不同的通信交互方式细节（mod_php/fastcgi）；除了开发PHP拓展，可以考虑学习开发Zend拓展，从更底层去了解PHP。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://i.loli.net/2017/12/24/5a3f7d64c6c6e.jpg" alt="image">  </p>
<h2 id="前言">前言</h2><p> 按照了解的很多PHP/LNMP程序员的发展轨迹，结合个人经验体会，抽象出很多程序员对未来的迷茫，特别对技术学习的盲目和慌乱，简单梳理了这个每个阶段PHP程序员的技术要求，来帮助很多PHP程序员做<br>对照设定学习成长目标。  </p>
<p>本文安装不去主流技术做了一个基本的梳理，整个是假设PHP程序员不是基础非常扎实的情况进行的设定，并且所有设定都非常具体明确清晰，可能会让人觉得不适，请理解仅代表一家之言。（未来技术变化不在讨论范围）<br>]]>
    
    </summary>
    
      <category term="转载" scheme="http://walk-code.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重回广州续]]></title>
    <link href="http://walk-code.github.io/2017/11/09/%E9%87%8D%E5%9B%9E%E5%B9%BF%E5%B7%9E%E7%BB%AD/"/>
    <id>http://walk-code.github.io/2017/11/09/重回广州续/</id>
    <published>2017-11-09T13:25:47.000Z</published>
    <updated>2017-11-09T13:25:47.985Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[重回到广州]]></title>
    <link href="http://walk-code.github.io/2017/10/31/%E9%87%8D%E5%9B%9E%E5%88%B0%E5%B9%BF%E5%B7%9E/"/>
    <id>http://walk-code.github.io/2017/10/31/重回到广州/</id>
    <published>2017-10-31T15:25:22.000Z</published>
    <updated>2017-11-04T04:41:52.116Z</updated>
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2017/11/04/59fd400899321.jpg" alt="image"></p>
<p>几经波折,还是回来了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://i.loli.net/2017/11/04/59fd400899321.jpg" alt="image"></p>
<p>几经波折,还是回来了。</p>
]]>
    </summary>
    
      <category term="杂谈" scheme="http://walk-code.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用acme.sh申请letsencrypt证书，配置nginx的一次经历]]></title>
    <link href="http://walk-code.github.io/2017/07/14/%E4%BD%BF%E7%94%A8acme-sh%E7%94%B3%E8%AF%B7letsencrypt%E8%AF%81%E4%B9%A6/"/>
    <id>http://walk-code.github.io/2017/07/14/使用acme-sh申请letsencrypt证书/</id>
    <published>2017-07-14T08:54:33.000Z</published>
    <updated>2017-07-14T10:05:47.534Z</updated>
    <content type="html"><![CDATA[<h2 id="申请并安装证书">申请并安装证书</h2><p>在折腾自己的项目的时候，恰巧有个吃灰的域名和服务器，那就搞点东西-。-~。  </p>
<blockquote>
<p>acme.sh 实现了 acme 协议, 可以从 letsencrypt 生成免费的证书。  </p>
</blockquote>
<p>详细步骤可以到<a href="https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="external">acme.sh</a>中查看详细操作步骤，照着文档很快就能申请好证书，并安装好证书。<br><a id="more"></a></p>
<h2 id="配置http">配置http</h2><p>在nginx.conf的文件中能看到<code>include/etc/nginx/conf.d/*.conf</code>,<code>include /etc/nginx/sites-enabled/*</code>,解析域名的配置文件是在sites-enabled目录下，在apache中也可以指向读取配置文件的位置，<code>Include conf/extra/httpd-vhosts.conf</code> 在编辑<code>/extra/httpd-vhosts.conf</code>添加<code>conf/vhosts/*.conf</code>指向vhosts下的所有的<code>.conf</code>文件。nginx在<code>sites-enabled</code>下有个default.conf的模板，apache在<code>vhosts</code>下也有一个这样的文件，照着配置基本就能完成。现在就可以通过域名来访问你的服务器。  </p>
<h2 id="配置https">配置https</h2><p>apache配置https和nginx配置https区别，在nginx下可以直接在当前的配置文件中添加一个新的server用来管理443端口，配置好证书的访问路径如下：<br>nginx下配置:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">	listen 443 ssl;</span><br><span class="line">    server_name 域名;</span><br><span class="line">    ssl_certificate 证书位置;</span><br><span class="line">    ssl_certificate_key  证书秘钥;</span><br><span class="line">    root 项目访问路径;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/g.access.log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">		...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">基本的配置好然后修改`.conf`文件，在80端的那个server中添加中定向代码`return 301 https://$server_name$request_uri;`，重启一下nginx服务器，这样基本就能ok。</span><br><span class="line"></span><br><span class="line">编辑`conf/extra/httpd-ssl.conf`你能发现这里又有一个`&lt;VirtualHost _default_:443&gt;`的标签,这里就是配置https的地方，apache配置https它也给出了默认的配置，照着配置就行了。  </span><br><span class="line">apache下的配置:  </span><br><span class="line">```python</span><br><span class="line">	&lt;VirtualHost _default_:443&gt;</span><br><span class="line">	DocumentRoot 项目访问路径</span><br><span class="line">	ServerName 域名:443</span><br><span class="line">	ErrorLog 错误日志存放路径</span><br><span class="line">	TransferLog 访问日志存放路径</span><br><span class="line">	SSLCertificateFile 证书存放路径</span><br><span class="line">	SSLCertificateKeyFile 证书密钥存放路径</span><br><span class="line"></span><br><span class="line">	&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p>
<p>同样修改<code>.conf</code>文件，在apache中使用https需要打开Rewrite，添加<code>RewriteEngine On</code> <code>RewriteCond %{HTTPS} !on</code> <code>RewriteRule (.*) https://%{HTTP_HOST}%{http://wx.tpmission.com/}$1</code> 然后重启一下apache服务器，输入域名，就能看见小绿锁了。  </p>
<h2 id="总结">总结</h2><p>有时候能找的一些好用的脚本，真的能高效的提高自己的工作效率。配置还是挺简单的，还有一些更加高级的用法，还需要在以后的日子里面慢慢的学习和使用，nginx的访问速度真没话说(<em>^__^</em>) 嘻嘻……  </p>
<blockquote>
<p>文中有什么错误的地方，请指出谢谢。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="申请并安装证书">申请并安装证书</h2><p>在折腾自己的项目的时候，恰巧有个吃灰的域名和服务器，那就搞点东西-。-~。  </p>
<blockquote>
<p>acme.sh 实现了 acme 协议, 可以从 letsencrypt 生成免费的证书。  </p>
</blockquote>
<p>详细步骤可以到<a href="https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E">acme.sh</a>中查看详细操作步骤，照着文档很快就能申请好证书，并安装好证书。<br>]]>
    
    </summary>
    
      <category term="证书" scheme="http://walk-code.github.io/tags/%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS五种方式实现Footer置底(转)]]></title>
    <link href="http://walk-code.github.io/2017/06/24/CSS%E4%BA%94%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0Footer%E7%BD%AE%E5%BA%95-%E8%BD%AC-1/"/>
    <id>http://walk-code.github.io/2017/06/24/CSS五种方式实现Footer置底-转-1/</id>
    <published>2017-06-24T14:43:31.000Z</published>
    <updated>2017-06-24T14:45:16.293Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近在写前端时，当内容的高度足够高时，Footer总能置底，当内容高度不够高时，Footer总是会漂，不能置底无奈之下只能找解决方案。于是就有了这篇文章-.-~，完美的解决了我的囧境。yong</p>
<blockquote>
<p>引用一段原话:The purpose of a sticky footer is that it “sticks” to the bottom of the browser window. But not always, if there is enough content on the page to push the footer lower, it still does that. But if the content on the page is short, a sticky footer will still hang to the bottom of the browser window.  </p>
</blockquote>
<h2 id="<!-_more_->"><a id="more"></a></h2><p>!(image)[<a href="https://cdn.css-tricks.com/wp-content/uploads/2016/05/sticky-footer-1.svg" target="_blank" rel="external">https://cdn.css-tricks.com/wp-content/uploads/2016/05/sticky-footer-1.svg</a>]  </p>
<hr>
<h2 id="第一种方式">第一种方式</h2><pre><code>通过设置<span class="keyword">margin-bottom为负的底部边距，但是需要设置一个占位元素高度等于Footer的高度。 </span> 
</code></pre><p>HTML:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">	&lt;body&gt;</span><br><span class="line">			&lt;div class="wrapper"&gt;</span><br><span class="line"></span><br><span class="line">  		content</span><br><span class="line"></span><br><span class="line">		&lt;div class="push"&gt;&lt;/div&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">			&lt;footer class="footer"&gt;&lt;/footer&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">CSS:  </span><br><span class="line">```python  </span><br><span class="line">	html, body &#123;</span><br><span class="line">	  height: 100%;</span><br><span class="line">	  margin: 0;</span><br><span class="line">	&#125;</span><br><span class="line">	.wrapper &#123;</span><br><span class="line">	  min-height: 100%;</span><br><span class="line"></span><br><span class="line">	  /* Equal to height of footer */</span><br><span class="line">	  /* But also accounting for potential margin-bottom of last child */</span><br><span class="line">	  margin-bottom: -50px;</span><br><span class="line">	&#125;</span><br><span class="line">	.footer,</span><br><span class="line">	.push &#123;</span><br><span class="line">	  height: 50px;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">### [Example](https://codepen.io/chriscoyier/pen/VjZmGj)  </span><br><span class="line"></span><br><span class="line">## 第二种方式  </span><br><span class="line">	通过设置Footer的margain-top为负数，这种方式需要在内容层的最外层在套一层元素，内部的margain-bottom的高度要与Footer的高度一致。  </span><br><span class="line">HTML:  </span><br><span class="line">```python</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">			&lt;div class="content"&gt;</span><br><span class="line">			&lt;div class="content-inside"&gt;</span><br><span class="line">  			content</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">			&lt;footer class="footer"&gt;&lt;/footer&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">CSS:  </span><br><span class="line">```python</span><br><span class="line">	html, body &#123;</span><br><span class="line">			height: 100%;</span><br><span class="line">			margin: 0;</span><br><span class="line">	&#125;	</span><br><span class="line">	.content &#123;</span><br><span class="line">	  min-height: 100%;</span><br><span class="line">	&#125;</span><br><span class="line">	.content-inside &#123;</span><br><span class="line">	  padding: 20px;</span><br><span class="line">	  padding-bottom: 50px;</span><br><span class="line">	&#125;</span><br><span class="line">	.footer &#123;</span><br><span class="line">	  height: 50px;</span><br><span class="line">	  margin-top: -50px;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">### [Example](https://codepen.io/chriscoyier/pen/aZoBMb)  </span><br><span class="line"></span><br><span class="line">## 第三种方式  </span><br><span class="line">	通过calc()计算函数来设置内容高度(不需要嵌套任何元素)  </span><br><span class="line">HTML:  </span><br><span class="line">```python  </span><br><span class="line">	&lt;body&gt;</span><br><span class="line">	 	&lt;div class="content"&gt;</span><br><span class="line"> 		content</span><br><span class="line">	 	&lt;/div&gt;</span><br><span class="line">	 	&lt;footer class="footer"&gt;&lt;/footer&gt;</span><br><span class="line">	&lt;/body&gt;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">CSS:  </span><br><span class="line">```python</span><br><span class="line">	.content&#123;</span><br><span class="line">		min-height:calc(100vh - 70px);</span><br><span class="line">	&#125;</span><br><span class="line">	.footer&#123;</span><br><span class="line">		height:50px</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意calc（）中的70px与页脚的50px固定高度。这是一个假设。假设内容中的最后一个项目的底边距为20px。这是底边加上需要添加在一起以从视口高度减去的页脚的高度。是的，我们在这里使用视口单位作为另一个小技巧，避免在设置100％的身高之前设置100％的包装高度。  </p>
</blockquote>
<h3 id="Example"><a href="https://codepen.io/chriscoyier/pen/jqRXBz" target="_blank" rel="external">Example</a></h3><h2 id="第四种方式">第四种方式</h2><pre><code>使用flexbox,上述三种方式的大问题是需要固定的高度页脚。固定高度通常是网页设计中的一大障碍。内容可以改变 事情是灵活的 固定高度通常是红旗领土。对粘性页脚使用[<span class="link_label">flexbox</span>](<span class="link_url">https://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/</span>)不仅不需要任何额外的元素，还可以允许一个可变的高度页脚。  
</code></pre><p>HTML:  </p>
<pre><code class="python">&lt;body&gt;
    &lt;div class="content"&gt;
    content
    &lt;/div&gt;
    &lt;footer class="footer"&gt;
    &lt;/footer&gt;
&lt;/body&gt;
</code></pre>
<p>CSS:  </p>
<pre><code class="python">html,body{
    height:<span class="number">100</span>%;
}
body{
    display:flex;
    flex-direction:column;
}
.content{
    flex:<span class="number">1</span> <span class="number">0</span> auto
}
</code></pre>
<h3 id="Example-1"><a href="https://codepen.io/chriscoyier/pen/RRbKrL" target="_blank" rel="external">Example</a></h3><h2 id="第五种方式">第五种方式</h2><pre><code>通过使用Grid网格布局，网格布局比flexbox 更新（并且不太受支持）。我们也有一个完整的[<span class="link_label">指南</span>](<span class="link_url">https://css-tricks.com/snippets/css/complete-guide-grid/</span>)。你也可以很容易地使用它来粘贴页脚。  
</code></pre><p>HTML:  </p>
<pre><code class="python">&lt;body&gt;
        &lt;div class="content"&gt;
    content
       &lt;/div&gt;
      &lt;footer class="footer"&gt;&lt;/footer&gt;
&lt;/body&gt;
</code></pre>
<p>CSS:  </p>
<pre><code class="python">html {
        height: <span class="number">100</span>%;
    }
body {
  min-height: <span class="number">100</span>%;
  display: grid;
  grid-template-rows: <span class="number">1</span>fr auto;
}
.footer {
  grid-row-start: <span class="number">2</span>;
  grid-row-end: <span class="number">3</span>;
}
</code></pre>
<h3 id="Example-2"><a href="https://codepen.io/chriscoyier/pen/YWKNrE" target="_blank" rel="external">Example</a></h3><h2 id="总结">总结</h2><blockquote>
<ul>
<li><a href="https://css-tricks.com/couple-takes-sticky-footer/" target="_blank" rel="external">传送门</a>    </li>
</ul>
</blockquote>
<p>这段时间在写前端的时，一直以为Footer很简单(毕竟随处可见)，但是做起来真的没有这么简单，记一下。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>最近在写前端时，当内容的高度足够高时，Footer总能置底，当内容高度不够高时，Footer总是会漂，不能置底无奈之下只能找解决方案。于是就有了这篇文章-.-~，完美的解决了我的囧境。yong</p>
<blockquote>
<p>引用一段原话:The purpose of a sticky footer is that it “sticks” to the bottom of the browser window. But not always, if there is enough content on the page to push the footer lower, it still does that. But if the content on the page is short, a sticky footer will still hang to the bottom of the browser window.  </p>
</blockquote>
<h2 id="<!-_more_->">]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[三亚旅行有感]]></title>
    <link href="http://walk-code.github.io/2017/06/11/%E4%B8%89%E4%BA%9A%E6%97%85%E8%A1%8C%E6%9C%89%E6%84%9F/"/>
    <id>http://walk-code.github.io/2017/06/11/三亚旅行有感/</id>
    <published>2017-06-11T08:49:58.000Z</published>
    <updated>2017-06-18T10:17:35.074Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>  毕竟第一次去旅游，所有感觉还是得记一下感受。趁着端午的放假的时间，仓促的在携程上报了团(说实话感觉真的不太好)，稍微总结一下。<br>  <a id="more"></a><br>  晚上19:00的飞机，到海南21:00，然后坐着小面包车去酒店。酒店还是相当舒服，附几张图：<br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d08044cae9.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d080b52d76.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d08116c062.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d08bb1865a.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d08bc42e59.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d0993deeb5.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d0994a2adc.jpg" alt="image">  </p>
<p>  酒店住的还是挺舒服的，借导游的一句话”需要什么一定要叫酒店服务，因为房间总是会缺一点东西。”，当然第一天我们就这样子做了，毕竟离开路由基本就活不下去了。赶紧和世界连通，当晚很累，基本就是洗完澡就直接睡了。</p>
<h2 id="第一天行程蜈支洲岛">第一天行程<a href="https://zh.m.wikipedia.org/wiki/蜈支洲岛" target="_blank" rel="external">蜈支洲岛</a></h2><p>  三亚早上还是没有这么热,坐着小面包车来到蜈支洲岛海岸游船购票处，买完票拍了几张岸边的图:<br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d0e20f2253.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d0e2a0a0a8.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d0e2f6e8e0.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d0e30469d1.jpg" alt="image">  </p>
<p>  海边的的风，还是十分舒服，到岛上的时候天气就变得特别的热，还是上图吧:<br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1220037bd.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d127b93ea8.jpg" alt="image">  </p>
<p>  海边的沙滩真的很漂亮，沙子都是白色的，很耀眼一张从高点往下看的图:<br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d139431622.jpg" alt="image">  </p>
<p>  岛上真的很大，毕竟15:30就要回去，也只走了大半个岛，岛边也有很多的水上活动，不敢玩的太high，很容易晒伤。傍晚做游船回到码头，去了下一个活动的地方”三亚千古情”，这个地方真的很赞，里面的歌舞剧应该是亮点之一，全程高能，尽管套路很土，但是给人视觉感和强烈。吐槽里面的鬼屋，真的”很鬼吓人喔”。玩玩游戏之后，出来就看到外面活动在举办活动，当然就是一群人在跳草裙舞，很精彩，从中也煽动了一部分跟他们一起跳。在本以为活动结束之际，一直很在意的的一个乞丐，突然滋事，表演起了一出小喜剧英雄救美，成功的带起了一波节奏，带起了一大波人跟了上去，之后一群人兴冲冲的跑到一个她们已经准备好的地方开始跳舞。直至跳舞结束，贴几张图:<br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1c8aba8b8.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1c8eccc54.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1c8eda025.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1c8fde404.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1dd705564.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1dda90977.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1ddfb7179.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1de38182e.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1ed334bb5.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1ed517336.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1ed6c1c6c.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1ed7a6327.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1ed86b3ed.jpg" alt="image"><br>  <img src="https://ooo.0o0.ooo/2017/06/11/593d1ed86cdf6.jpg" alt="image">  </p>
<h2 id="第二天去了槟榔谷呀诺达">第二天去了<a href="https://zh.m.wikipedia.org/wiki/槟榔谷" target="_blank" rel="external">槟榔谷</a><a href="https://zh.m.wikipedia.org/wiki/呀诺达" target="_blank" rel="external">呀诺达</a></h2><p>  来到目的地已经差不多10点多了，一个苗族的地导带着我们坐上观光车，途径经过很多木屋很有韵味。图:<br>  <img src="https://ooo.0o0.ooo/2017/06/18/59464b34c1587.jpg" alt="微信图片_20170618174633.jpg"><br>  <img src="https://ooo.0o0.ooo/2017/06/18/59464b377a224.jpg" alt="微信图片_20170618174642.jpg"><br>  <img src="https://ooo.0o0.ooo/2017/06/18/59464b3791296.jpg" alt="微信图片_20170618174645.jpg"><br>  <img src="https://ooo.0o0.ooo/2017/06/18/59464b386386b.jpg" alt="微信图片_20170618174649.jpg"><br>  <img src="https://ooo.0o0.ooo/2017/06/18/59464b386ffa7.jpg" alt="微信图片_20170618174652.jpg"><br>  这里听着这个17岁的苗族导游介绍的着没个经典，一路上没碰见一个苗族人，他们都很热心的跟我们说了一声呀诺达(你好)，然而听着这个17岁的小女孩介绍着这里的历史，可以看到她的脸上是很自豪，听她说他们现在还住在自己建的寨子里。虽然很想去看但是觉得不太可能，还是有点小遗憾的-。-~，后面基本就跟参观植物园差不多，没有什么可以玩的。附一张苗族人用来捕猎的毒树，据说现在还没有药能解图:<br>  <img src="https://ooo.0o0.ooo/2017/06/18/59464e586e69b.jpg" alt="微信图片_20170618180037.jpg"><br>  <img src="https://ooo.0o0.ooo/2017/06/18/59464e5879ebb.jpg" alt="微信图片_20170618180032.jpg">  </p>
<h2 id="总结">总结</h2><p>  后面的行程基本上就很烂了，就不在多说了。三亚还是一个很值得去的地方，这里的人虽然很黑(宰客-。-~)，但是真的是一个放松心情的一个好地方，可能去的季节的不太对吧！还有很多地方没有去过，比如亚龙湾、三亚湾、鹿回头公园等，这些地方也只有下次才能区看了。自从去的参观玩南山寺，是的，我被里面的菩萨给圈粉了。单单一个南山寺就占地400亩，里面的寺庙真的很多，很容易迷路，能看到里面的<a href="https://zh.m.wikipedia.org/wiki/南山海上观音圣像" target="_blank" rel="external">观音圣像</a>，感觉还是来的挺值的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>  毕竟第一次去旅游，所有感觉还是得记一下感受。趁着端午的放假的时间，仓促的在携程上报了团(说实话感觉真的不太好)，稍微总结一下。<br>]]>
    
    </summary>
    
      <category term="旅游" scheme="http://walk-code.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php中ES的简单使用]]></title>
    <link href="http://walk-code.github.io/2017/04/26/php%E4%B8%ADES%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%94%A8/"/>
    <id>http://walk-code.github.io/2017/04/26/php中ES的简单实用/</id>
    <published>2017-04-26T13:10:12.000Z</published>
    <updated>2017-04-28T10:58:32.719Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>之所以要使用ElasticSearch，也是因为业务需求吧，那搜索来说吧！当数据量多或者少的时候总是会伴随的搜索结果呈现的问题，数据库仅仅同like的关键字能帮我们解决小部分的数据查询问题，<br>当然也可以做索引，然后通过索引来找到对应的数据，但是这个工作量就有点大，最重要就是TM的麻烦。  </p>
<a id="more"></a> 
<h2 id="什么是ES"><a href="https://en.wikipedia.org/wiki/Elasticsearch" target="_blank" rel="external">什么是ES</a></h2><h2 id="基本配置">基本配置</h2><h3 id="1-须知">1.须知</h3><p>ES虽然也是创建索引，但是当你会发现他并不是通过索引来做搜索，搜索的是索引里面的已经设置好的一个个文档，并且提供了增删查改这几个方法来对document进行操作，很好的管理的的<a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/document.html" target="_blank" rel="external">文档</a>。</p>
<h3 id="2-下载客户端">2.下载客户端</h3><p>先从<a href="https://www.elastic.co/start" target="_blank" rel="external">官网下载</a>一个客户端，里面有个图像化管理索引的插件Kibana，这个安不安装都可以，下载好后解压修改一下config下的elasticsearch.yml文件，增加</p>
<pre><code class="python">cluster.name: lgs-es
node.name: node-<span class="number">1</span>
</code></pre>
<p> ‘切记一定要把插入这两段代码的时候前面不能有空格’ ，最后启动成功后:<br><img src="http://ww1.sinaimg.cn/large/005yEbTbgy1ff0enkggafj30dw093aa7.jpg" alt="image"><br>接着直接<a href="http://localhost:9200/" target="_blank" rel="external">http://localhost:9200/</a> 填上elastic and changeme 登录成功后，显示:<br><img src="http://ww1.sinaimg.cn/large/005yEbTbgy1ff0eqsylf6j309905uq2r.jpg" alt="image"><br>这样就算开启客户端成功。  </p>
<p>##开始编码<br>作为一个强大的搜索引擎自然而然支持世界上最好的语言啦！<a href="https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html" target="_blank" rel="external">官方教程</a>,官网上有几个例子包括创建索引删除索引，对document的增删查改，对搜索结果分页等。  </p>
<h3 id="1-创建索引">1.创建索引</h3><pre><code class="python">$hosts = [
            'http://elastic:changeme@localhost:9200',
        ];

        $client = ClientBuilder::create()-&gt;setHosts($hosts)-&gt;allowBadJSONSerialization()-&gt;build();//初始化
        $params = [
            'index' =&gt; 'search_index',
            'body' =&gt; [
                'settings' =&gt; [
                    'number_of_shards' =&gt; 3,
                    'number_of_replicas' =&gt; 2
                ],
                'mappings' =&gt; [
                    'fulltext' =&gt; [
                        '_source' =&gt; [
                            'enabled' =&gt; true
                        ],
                        'properties' =&gt; [
                            'id' =&gt; [
                                'type' =&gt; 'text',
                                'analyzer' =&gt; 'ik_max_word'
                            ],
                            'title' =&gt; [
                                'type' =&gt; 'text',
                                'analyzer' =&gt; 'ik_max_word'                            
                            ],
                            'image' =&gt; [
                                'type' =&gt; 'text',
                                'analyzer' =&gt; 'ik_max_word'
                            ],
                            'keyword' =&gt; [
                                'type' =&gt; 'text',
                                'analyzer' =&gt; 'ik_max_word'
                            ],
                            'type' =&gt; [
                                'type' =&gt; 'text',
                                'analyzer' =&gt; 'ik_max_word'
                            ]
                        ]
                    ]
                ]
            ]
        ];
        $client-&gt;indices()-&gt;create($params);
</code></pre>
<p>这样就创建了一个索引还是挺简单的，ik_max_word是一个解析器，使用了<a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="external">ik</a>分词这个包,直接解压到更目录的plugins，重启ES就可以使用了。  </p>
<h3 id="2-创建批量文档">2.创建批量文档</h3><pre><code class="python">$hosts = [
        // This is effectively equal to: "https://username:password!#$?*abc@foo.com:9200/"
        'http://elastic:changeme@localhost:9200',
    ];

    $client = ClientBuilder::create()-&gt;setHosts($hosts)-&gt;allowBadJSONSerialization()-&gt;build();//初始化

    $posts = Activity::where('is_shelves',1)-&gt;orderBy('created_time','desc')-&gt;get();

    $params = ['body' =&gt; []];

    foreach ($posts as $k=&gt;$post) {

        $params['body'][] = [
            'index' =&gt; [
                '_index' =&gt; 'search_index',
                '_type' =&gt; 'fulltext',
                '_id' =&gt; $post-&gt;id."activity"
            ]
        ];

        $key_word = Keyword::where('type',1)-&gt;where('act_id',$post-&gt;id)-&gt;value('keyword');

        $params['body'][] = [
            'id' =&gt; $post-&gt;id,
            'title' =&gt; $post-&gt;activity_name,
            'image' =&gt; $post-&gt;hot_picture,
            'keyword' =&gt; isset($key_word) ? $key_word : isset($post-&gt;tags-&gt;belongsto_cn) ? unserialize($post-&gt;tags-&gt;belongsto_cn)[0] : "",
            'type' =&gt; 1
        ];

    }

    return $client-&gt;bulk($params);
</code></pre>
<p>为了方便管理文档最好把Index的id换成数据的id值，方便以后的增删查改。  </p>
<h3 id="3-搜索">3.搜索</h3><p>先通过’<a href="http://elastic:changeme@localhost:9200/_cat/indices?v&#39;检查的索引和文档是否创建成功，创建成功后，终于可以开始搜索：" target="_blank" rel="external">http://elastic:changeme@localhost:9200/_cat/indices?v&#39;检查的索引和文档是否创建成功，创建成功后，终于可以开始搜索：</a></p>
<pre><code class="python">$hosts = [
       // This is effectively equal to: "https://username:password!#$?*abc@foo.com:9200/"
       'http://elastic:changeme@localhost:9200',
   ];

   $client = ClientBuilder::create()-&gt;setHosts($hosts)-&gt;allowBadJSONSerialization()-&gt;build();//初始化

   $params = [
       'index' =&gt; 'search_index',
       'type' =&gt; 'fulltext',
       'from' =&gt; empty($request-&gt;input('page',0) - 1) ? 0 : ($request-&gt;input('page',0) - 1) * 6,//显示第一条的偏移量
       'size' =&gt; 6,
       'body' =&gt; [
           'query' =&gt; [
               'bool' =&gt; [
                   'should' =&gt; [
                       ["match" =&gt; [ "id" =&gt; $search]],
                       ["match" =&gt; [ "title" =&gt; $search]],
                       ["match" =&gt; [ "image" =&gt; $search]],
                       ["match" =&gt; [ "keyword" =&gt; $search]],
                       ["match" =&gt; [ "type" =&gt; $search]],
                   ],
               ],

           ],
           "highlight" =&gt;[
               "pre_tags" =&gt; ["&lt;tag1&gt;", "&lt;tag2&gt;"],
               "post_tags" =&gt; ["&lt;/tag1&gt;", "&lt;/tag2&gt;"],
               "fields" =&gt; [
                   "title" =&gt; new \stdClass()
               ]

           ]
       ]
   ];

   $files_search_data = [];
   //return $client-&gt;indices()-&gt;getMapping(['index'=&gt;'activiyt2_index']);
   //$search_result = $client-&gt;search($params)['hits']['hits'];
   $response = $client-&gt;search($params);
</code></pre>
<p>这里用了’highlight’让搜索的结果高亮是为了检查中文分词是否成功。 ‘from’ 表示页码， ‘size’ 表示分页条数。上述的搜索结果:  </p>
<p><img src="http://ww1.sinaimg.cn/large/005yEbTbgy1ff0fncq018j30nk0kw76e.jpg" alt=""><br>分词的结果也能显示出来，而且速度行。  </p>
<p>##参考<br><a href="https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html" target="_blank" rel="external">ElasticSearch-PHP</a><br><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="external">ik分词</a>  </p>
<p>##未完成  </p>
<blockquote>
<ul>
<li>分布式搜索的搭建  </li>
<li>代码的优化  </li>
<li>用户搜索记录的保存</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>之所以要使用ElasticSearch，也是因为业务需求吧，那搜索来说吧！当数据量多或者少的时候总是会伴随的搜索结果呈现的问题，数据库仅仅同like的关键字能帮我们解决小部分的数据查询问题，<br>当然也可以做索引，然后通过索引来找到对应的数据，但是这个工作量就有点大，最重要就是TM的麻烦。  </p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[后台开发的那些事]]></title>
    <link href="http://walk-code.github.io/2016/10/11/%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://walk-code.github.io/2016/10/11/后台开发的那些事/</id>
    <published>2016-10-11T06:00:02.000Z</published>
    <updated>2016-10-11T06:00:02.794Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Laravel+Dingo构建restful-Api]]></title>
    <link href="http://walk-code.github.io/2016/10/10/%E6%B5%85%E7%94%A8Laravel-Dingo%E6%9E%84%E5%BB%BArestful-Api/"/>
    <id>http://walk-code.github.io/2016/10/10/浅用Laravel-Dingo构建restful-Api/</id>
    <published>2016-10-10T06:40:47.000Z</published>
    <updated>2016-10-11T01:03:56.214Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>最近一段时间在用php(第二好的语言)在折腾后台，从一开始”某人叫我必须要用thinkphp开发开始”一直的用TP来写接口,到后来我发现TP的的一些规范让我觉得恶心以外，更多的是用它来真的不好写restful风格的api，直到我遇见的<a href="https://github.com/dingo/api/wiki/Creating-API-Endpoints" target="_blank" rel="external">Dingo</a>+<a href="https://github.com/laravel/laravel" target="_blank" rel="external">laravel</a>这两个组合，大大的加快了开发的效率。Dingo提供了为我们提供了restful风格的api，自己可以制定返回参数，在wiki上都能找到，下面我是的项目目录结构：<br><a id="more"></a>  </p>
<hr>
<h2 id="概述">概述</h2><p><img src="http://ww1.sinaimg.cn/large/005yEbTbgw1f8ksv6hotzj306l04wgm0.jpg" alt="project structure"></p>
<p>Controller这个文件夹就不需要多讲了，来看看Requests文件夹，里面主要是用来对前端传递过来的数据进行判断，自己根据自己的业务逻辑来制定判定的规则，一下面这张图来看:  </p>
<p><img src="http://ww1.sinaimg.cn/large/005yEbTbgw1f8kt08ob54j30bh08sjrw.jpg" alt="project class">  </p>
<p>authorize这个函数里做了一下权限的判断，rules这个函数就是根据自己的业务需求来制定自己想要的判定规则。前提是这个类必须继承FormRequest这个类，这个类是Dingo的一个用来做表单数据判断的类，里面有两个函数failedValidation和failedAuthorization，从函数名可以看出一个是用来校验错误后返回错误的信息，另一个则用来判断是否有授权，FormRequest还有个父类，这个父类实现了ValidatesWhenResolved这个接口，为我们提供了一下对数据判断的方法。</p>
<p>讲了了这么多最重要的还是要有数据，Transformers这个文件夹主要功能就是对数据进行返回，也就是产出者。还是照惯例给出一张图：  </p>
<p><img src="http://ww2.sinaimg.cn/large/005yEbTbgw1f8kt9cwom6j30hg0ekdj7.jpg" alt="project class">  </p>
<p>核心的函数transform中可以看出，我没有做太多的东西，只是根据数据库的字段全部填写上去(根据自己的业务逻辑)，这个类必须得继承TransformerAbstract这个抽象类，打开这个抽象类就会发现这么一段话  </p>
<p><img src="http://ww3.sinaimg.cn/large/005yEbTbgw1f8lygqowdvj30kd05pq3y.jpg" alt="project class">  </p>
<p>大概的意思就是所有的数据转化的类都必须继承TransformerAbstract这个抽象类，这是为了能使用collection()和item()这两个方法，顾名思义前者是返回一个集合，后者则是返回一条记录。继承这个抽象类，必须实现transform()方法，用来返回你所需要的数据。</p>
<blockquote>
<p>至于为什么要用到transform(）这个方法，我在TransformerAbstract这个抽象类中并未找到这个抽象的方法。(待解决)  </p>
</blockquote>
<hr>
<h2 id="鉴权">鉴权</h2><h3 id="1-基本概念">1.基本概念</h3><p><a href="https://en.wikipedia.org/wiki/JSON_Web_Token" target="_blank" rel="external">JWT简介</a><br>JWT-workflow 一图胜千言:<br><img src="http://ww3.sinaimg.cn/large/005yEbTbgw1f8n44jfv83j31120ksq4y.jpg" alt="">  </p>
<h3 id="2-配置">2.配置</h3><p>说到后台，最主要还是鉴权，后台必须规定调用者应该登录后才能有权限去对服务器的资源进行请求，否则不予许其请求，JWT(json web token是一种网络的令牌)Dingo里面已经封装好了。虽然dingo里面已经包含了jwt,但是本着折腾的心我还是使用<a href="https://github.com/tymondesigns/jwt-auth/wiki/Installation" target="_blank" rel="external">tymondesigns的jwt-auth开源库</a>,跟着文档配置完就OK了，配置成功后config文件夹会有个jwt.php的配置文件，可以根据自己的业务需求来制定token的生命时间，默认是一小时内失效。refresh_token的时间则是是两周。</p>
<h3 id="3-设计思路">3.设计思路</h3><p>接口设计用户登录之后分配一个accessToken和一个refreshToken，accessToken用于发起用户请求，refreshToken用于更新accessToken。accessToken会设置有效期，可以设为24小时。而用户退出登录之后，accessToken和refreshToken都将作废。重新登录之后会分配新的accessToken和refreshToken。用户凭借着这个accessToken来向服务器请求资源。  </p>
<h3 id="4-一些安全(未做)">4.一些安全(未做)</h3><p>现在大多数的网站都采用<a href="https://en.wikipedia.org/wiki/HTTPS" target="_blank" rel="external">HTTPS协议</a>,那就必须把HTTP协议升级到HTTP/2，<a href="http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html" target="_blank" rel="external">阮一峰大大</a>，还有一些对安全性要求较高的数据，并未有做处理，mark<a href="http://keeganlee.me/post/practice/20160812" target="_blank" rel="external">API安全设计</a>  </p>
<hr>
<h2 id="总结">总结</h2><p>基本上就可以做一些简单的接口开发.</p>
<hr>
<h2 id="参考">参考</h2><ul>
<li><a href="https://www.sitepoint.com/how-to-build-an-api-only-jwt-powered-laravel-app/" target="_blank" rel="external">blog</a>  </li>
<li><a href="https://www.alwayscoder.com/using-laravel-and-dingo-build-your-restful-api/" target="_blank" rel="external">alwayscoder-blog</a>  </li>
<li><a href="http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html" target="_blank" rel="external">https</a>  </li>
<li><a href="https://github.com/layer7be/vue-starter-laravel-api" target="_blank" rel="external">laravel+dingo</a>  </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>最近一段时间在用php(第二好的语言)在折腾后台，从一开始”某人叫我必须要用thinkphp开发开始”一直的用TP来写接口,到后来我发现TP的的一些规范让我觉得恶心以外，更多的是用它来真的不好写restful风格的api，直到我遇见的<a href="https://github.com/dingo/api/wiki/Creating-API-Endpoints">Dingo</a>+<a href="https://github.com/laravel/laravel">laravel</a>这两个组合，大大的加快了开发的效率。Dingo提供了为我们提供了restful风格的api，自己可以制定返回参数，在wiki上都能找到，下面我是的项目目录结构：<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[SeasLog的基本使用]]></title>
    <link href="http://walk-code.github.io/2016/07/24/SeasLog%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://walk-code.github.io/2016/07/24/SeasLog的基本使用/</id>
    <published>2016-07-24T01:47:08.000Z</published>
    <updated>2016-07-24T02:30:53.748Z</updated>
    <content type="html"><![CDATA[<h2 id="SeasLog简介">SeasLog简介</h2><p>SeasLog是一个日志的拓展,日志作为系统或者软件、应用的运行记录。通过对日志进行分析，可以让我们更好的了解应用的运行情况，也可以逐步的对用户的操作、用户习惯进行分析，从而优化，对于应用中的问题，能快速的得到定位，方便Developer解决。<br><a id="more"></a></p>
<h2 id="为什么要使用SeasLog">为什么要使用SeasLog</h2><p>php内置error_log、syslog函数功能强大且性能极好，但由于各种缺陷(error_log无错误级别、无固定格式，syslog不分模块、与系统日志混合)，灵活度降低了很多，不能满足应用需求。  </p>
<p>好消息是，有不少第三方的log类库弥补了上述缺陷，如log4php、plog、Analog等(当然也有很多应用在项目中自己开发的log类)。其中以log4php最为著名，设计精良、格式完美、文档完善、功能强大。推荐。  </p>
<p>不过log4php在性能方面表现非常差,下图是SeasLog与log4php的ab并发性能测试( 测试环境:Ubuntu12.04单机,CPU I3,内存 16G,硬盘 SATA 7200)<br>以下引用@<a href="https://github.com/Neeke" target="_blank" rel="external">Neeke</a>的统计第三方(log4php)性能测试的一组图  </p>
<p><img src="http://ww3.sinaimg.cn/large/005yEbTbgw1f64sh6r3o6j30lz0ac0tc.jpg&quot;性能测试&quot;" alt="性能测试">  </p>
<p>那么有没有一种log类库满足以下需求呢: </p>
<ul>
<li>分模块、分级别  </li>
<li>配置简单(最好是勿须配置)  </li>
<li>日志格式清晰易读</li>
<li>应用简单、性能很棒  </li>
</ul>
<p>SeasLog 正是应此需求而生。  </p>
<hr>
<p>根据tips可以这样写,基于thinkphp,目录结构ThinkPHP\Library\Vendor\SeasLog\Logs.class.php：  </p>
<pre><code class="python">&lt;?php

namespace Vendor\SeasLog;
/*
 * author kylin
 * data 2016-7-17
 * */

class Logs
{

    /**
     * 获取访问者的ip 请求的uri
     *
     * return 访问者的ip 请求的uri     ip_address | request_uri
     */
    static public function getIpUri() {
        return $_SERVER['REMOTE_ADDR'] . ' | ' . $_SERVER['REQUEST_URI'] . ' | ';
    }

    /**
     * 设置日志的根路径
     * @param $basePath
     *
     * */
    static public function setBasePath($basePath) {
        \SeasLog::setBasePath($basePath);
    }

    /**
     *获取日志的根路径
     *
     * retrun string
     * */
    static public function getBasePath() {
        return \SeasLog::getBasePath();
    }

    /**
     * 设置模块目录
     * @param $module
     *
     * */
    static public function setLogger($module) {
        \SeasLog::setLogger($module);
    }

    /**
     * 获取最后一次的设置的模块
     * return string
     *
     * */
    static public function getLastLogger() {
        return \SeasLog::getLastLogger();
    }

    /**
     *统计所有类型（或单个类型）行数
     * @param string $level
     * @param string $log_path
     * @param null $key_word
     *
     * @return array | long
     * */
    static public function analyzerCount($level = 'all', $log_path = '*', $key_word = NULL) {
        return array();
    }

    /**
     * 以数组形式，快速取出某类型log的各行详情
     *
     * @param        $level
     * @param string $log_path
     * @param null $key_word
     * @param int $start
     * @param int $limit
     * @param        $order 默认为正序 SEASLOG_DETAIL_ORDER_ASC，可选倒序 SEASLOG_DETAIL_ORDER_DESC
     *
     * @return array
     */
    static public function analyzerDetail($level = SEASLOG_INFO, $log_path = '*', $key_word = NULL, $start = 1, $limit = 20, $order = SEASLOG_DETAIL_ORDER_ASC){
        return SeasLog::analyzerDetail($level = SEASLOG_INFO, $log_path = '*', $key_word = NULL, $start = 1, $limit = 20, $order = SEASLOG_DETAIL_ORDER_ASC);
    }

    /**
     * 获取当前日志的Buffer的内容
     * return array
     * */
    static public function getBuffer() {
        return getBuffer();
    }

    /**
     * 将buffer中的日志立刻刷到硬盘
     *
     * @return bool
     */
    static public function flushBuffer(){
        return true;
    }

    /**
     * 记录debug日志
     * @param $message
     * @param array $content
     * @param string $module
     */
    static public function debug($message,array $content = array(),$module = ''){

        #$level = SEASLOG_DEBUG
        $message = self::getIpUri().$message;
        if($module !== ''){
            $module = $_SERVER['SERVER_NAME'].'/'.$module;
        }
        \SeasLog::debug($message,$content,$module);
    }

    /**
     * 记录info日志
     * @param $message
     * @param array $content
     * @param string $module
     *
     * */
    static public function info($message,array $content = array(),$module = '') {

        #$level = SEASLOG_INFO
        $message = self::getIpUri().$message;
        if($module !== ''){
            $module = $_SERVER['SERVER_NAME'].'/'.$module;
        }
        \SeasLog::info($message,$content,$module);
    }

    /**
     * 记录notice日志
     * @param $message
     * @param array $content
     * @param string $module
     *
     * */
    static public function notice($message,array $content = array(),$module = '') {

        #$level = SEASLOG_NOTICE
        $message = self::getIpUri().$message;
        if($module !== ''){
            $module = $_SERVER['SERVER_NAME'].'/'.$module;
        }
        \SeasLog::notice($message,$content,$module);
    }

    /**
     * 记录warning日志
     * @param $message
     * @param array  $content
     * @param string $module
     * */
    static public function warning($message,array $content = array(),$module = '') {

        #$level = SEASLOG_WARNING
        $message = self::getIpUri().$message;
        if($module !== ''){
            $module = $_SERVER['SERVER_NAME'].'/'.$module;
        }
        \SeasLog::warning($message,$content,$module);
    }

    /**
     * 记录error日志
     * @param $message
     * @param array $content
     * @param string $module
     */
    static public function error($message,array $content = array(),$module = '') {

        #$level = SEASLOG_ERROR
        $message = self::getIpUri().$message;
        if($module !== ''){
            $module = $_SERVER['SERVER_NAME'].'/'.$module;
        }
        \SeasLog::error($message,$content,$module);
    }

    /**
     * 记录critical日志
     * @param $message
     * @param array $content
     * @param string $module
     */
    static public function critical($message,array $content = array(),$module = '') {

        #$level = SEASLOG_CRITICAL
        $message = self::getIpUri().$message;
        if($module !== ''){
            $module = $_SERVER['SERVER_NAME'].'/'.$module;
        }
        \SeasLog::critical($message,$content,$module);
    }

    /**
     * 记录alert日志
     * @param $message
     * @param array $content
     * @param string $module
     */
    static public function alert($message,array $content = array(),$module = '') {

        #$level = SEASLOG_ALERT
        $message = self::getIpUri().$message;
        if($module !== ''){
            $module = $_SERVER['SERVER_NAME'].'/'.$module;
        }
        \SeasLog::alert($message,$content,$module);
    }

    /**
     * 记录emergency日志
     * @param $message
     * @param array $content
     * @param string $module
     */
    static public function emergency($message,array $content = array(),$module = '') {

        #$level = SEASLOG_EMERGENCY
        $message = self::getIpUri().$message;
        if($module !== ''){
            $module = $_SERVER['SERVER_NAME'].'/'.$module;
        }
        \SeasLog::emergency($message,$content,$module);
    }

    /**
     * 通用日志方法
     * @param $level
     * @param $message
     * @param array $content
     * @param string $module
     */
    static public function log($level,$message,array $content = array(),$module = '') {

        $message = self::getIpUri().$message;
        if($module !== ''){
            $module = $_SERVER['SERVER_NAME'].'/'.$module;
        }
        \SeasLog::log($level,$message,$content,$module);
    }

}
</code></pre>
<h3 id="附">附</h3><p>@Neeke <a href="https://github.com/Neeke/SeasLog]" target="_blank" rel="external">https://github.com/Neeke/SeasLog</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="SeasLog简介">SeasLog简介</h2><p>SeasLog是一个日志的拓展,日志作为系统或者软件、应用的运行记录。通过对日志进行分析，可以让我们更好的了解应用的运行情况，也可以逐步的对用户的操作、用户习惯进行分析，从而优化，对于应用中的问题，能快速的得到定位，方便Developer解决。<br>]]>
    
    </summary>
    
      <category term="PHP日志拓展" scheme="http://walk-code.github.io/tags/PHP%E6%97%A5%E5%BF%97%E6%8B%93%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用用GreenDao]]></title>
    <link href="http://walk-code.github.io/2016/05/29/%E6%B5%85%E7%94%A8GreenDao/"/>
    <id>http://walk-code.github.io/2016/05/29/浅用GreenDao/</id>
    <published>2016-05-29T04:41:43.000Z</published>
    <updated>2016-10-10T07:58:12.567Z</updated>
    <content type="html"><![CDATA[<h2 id="GreenDao官方简介">GreenDao官方简介</h2><p>greenDAO is an open source library for Android providing an easy to use interface to SQLite databases to help developers handle data efficiently – relieving developers from dealing with low-level database requirements while saving development time. SQLite is an awesome embedded relational database. Still, writing SQL and parsing query results are quite tedious and time-consuming tasks. greenDAO frees you from these by mapping Java objects to database tables (often called ORM). This way you can store, update, delete, and query for Java objects using a simple object oriented API.</p>
<h2 id="<!-more_->"><a id="more"></a></h2><h3 id="GreenDao思维导图(关系映射(ORM))">GreenDao思维导图(关系映射(ORM))</h3><p><img src="http://ww4.sinaimg.cn/large/005yEbTbgw1f4c5vwqsoqj308w02k0su.jpg" alt="思维导图"></p>
<h3 id="自动生成GreedDAO资源()">自动生成GreedDAO资源()</h3><p><img src="http://ww2.sinaimg.cn/large/005yEbTbgw1f4c67jcxjnj30hs08m400.jpg" alt="自动生成GreedDAO资源"></p>
<p>如果我们需要在项目中使用GreenDao，那么就需要我们创建一个新的Java Project,用于自动生成Bean、DAO、DaoMaster、DaoSession类。</p>
<h3 id="关于DAO、DaoMaster、DaoSession、Entity流程">关于DAO、DaoMaster、DaoSession、Entity流程</h3><p><img src="http://ww3.sinaimg.cn/large/005yEbTbgw1f4c6g1qc8pj304607kmxd.jpg" alt="流程图"></p>
<p><img src="http://ww1.sinaimg.cn/large/005yEbTbgw1f4c6gqbdrxj305006rq30.jpg" alt="流程图"></p>
<p>通过流程图可以看出Dao类操作Entity类，而DaoSession是负责创建和管理Dao类，DaoSession是由DaoMaster负责创建的。可以看出当我们在对数据库进行操作时，为了避免创建多个DaoMaster和DaoSession,可以在继承applacation类中(程序入口)，定义一个全局变量。例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">        create DaoMaster</span><br><span class="line"><span class="decorator">        @param context</span></span><br><span class="line"><span class="decorator">        @return</span></span><br><span class="line">     */</span><br><span class="line">    public static DaoMaster getDaoMaster(Context context) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (null == daoMaster) &#123;</span><br><span class="line"></span><br><span class="line">            DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(context,DATABASE_NAME,null);</span><br><span class="line">            daoMaster = new DaoMaster(helper.getWritableDatabase());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> daoMaster;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">        get DaoSession</span><br><span class="line"><span class="decorator">        @param context</span></span><br><span class="line"><span class="decorator">        @return</span></span><br><span class="line">     */</span><br><span class="line">    public static DaoSession getDaoSession(Context context) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (null == daoSession) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (null == daoMaster) &#123;</span><br><span class="line">                daoMaster = getDaoMaster(context);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            daoSession = daoMaster.newSession();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> daoSession;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="基本配置">基本配置</h2><h3 id="一-在android工程中配置GreenDao_Code_Generation模块">一.在android工程中配置GreenDao Code Generation模块</h3><p>1.在 .src/main 目录下新建一个与 java同层级的「java-gen」目录，用于存放由 greenDAO 生成的 Bean、DAO、DaoMaster、DaoSession 等类。<br><img src="http://ww1.sinaimg.cn/large/005yEbTbgw1f4c79i9txmj309703y74e.jpg" alt="流程图"></p>
<p>2.配置 Android 工程（app）的 build.gradle，如图分别添加 sourceSets 与 dependencies。<br><img src="http://ww3.sinaimg.cn/large/005yEbTbgw1f4c7blimymj30hs0f2ade.jpg" alt="流程图"></p>
<h3 id="二-创建纯Java工程">二.创建纯Java工程</h3><p>1.通过 File -&gt; New -&gt; New Module -&gt; Java Library -&gt; 填写相应的包名与类名 -&gt; Finish.<br><img src="http://ww2.sinaimg.cn/large/005yEbTbgw1f4c78g5lpuj30cm0a0gnq.jpg" alt="流程图"><br><img src="http://ww1.sinaimg.cn/large/005yEbTbgw1f4c7fq5qpej30t40h9dic.jpg" alt="流程图"></p>
<p>2.配置新模块的 build.gradle，添加 dependencies.<br><img src="http://ww4.sinaimg.cn/large/005yEbTbgw1f4c7i0fi4fj30kv06aaaz.jpg" alt="流程图"></p>
<p>3.编写新模块的类用于生成java-gen下的DaoMaster、DaoSession、Dao、Entity类的生成</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   public class DaoGen &#123;</span><br><span class="line"></span><br><span class="line">   public static  void main(String [] args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">       Schema schema = new Schema(1,"project.kylin.greendao");</span><br><span class="line"></span><br><span class="line">//EntityBean is Associated database table,table name is class name</span><br><span class="line">       Entity userBean = schema.addEntity("User");</span><br><span class="line"></span><br><span class="line">//add field</span><br><span class="line">      userBean.addIdProperty();</span><br><span class="line">      userBean.addStringProperty("uid").notNull();</span><br><span class="line">      userBean.addDateProperty("date");</span><br><span class="line"></span><br><span class="line">   //generator gao</span><br><span class="line">  	   new DaoGenerator().generateAll(schema,"app/src/main/java-gen");</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三-生成_DAO_文件">三.生成 DAO 文件</h3><ul>
<li>执行 java 工程，如一切正常，你将会在控制台看到如下日志，并且在主工程「java-gen」下会发现生成了DaoMaster、DaoSession、UserDao、User共4个类文件。(从console查看编译结果)  </li>
</ul>
<hr>
<h2 id="升级和比较">升级和比较</h2><h3 id="升级">升级</h3><ul>
<li><a href="http://blog.csdn.net/growth58/article/details/50453038" target="_blank" rel="external">GreenDao数据库升级解决方案</a> </li>
</ul>
<h3 id="性能比较">性能比较</h3><ul>
<li><a href="https://github.com/litesuits/for-test/blob/master/DataBaseTest/README.md" target="_blank" rel="external">GreenDao与LiteOrm</a></li>
</ul>
<hr>
<h2 id="参考文献">参考文献</h2><ul>
<li><a href="http://greendao-orm.com/" target="_blank" rel="external">官网</a></li>
<li><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">参考demo</a></li>
</ul>
<h2 id="其他开源的ORM">其他开源的ORM</h2><ul>
<li><a href="https://github.com/Raizlabs/DBFlow" target="_blank" rel="external">DBFlow</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="GreenDao官方简介">GreenDao官方简介</h2><p>greenDAO is an open source library for Android providing an easy to use interface to SQLite databases to help developers handle data efficiently – relieving developers from dealing with low-level database requirements while saving development time. SQLite is an awesome embedded relational database. Still, writing SQL and parsing query results are quite tedious and time-consuming tasks. greenDAO frees you from these by mapping Java objects to database tables (often called ORM). This way you can store, update, delete, and query for Java objects using a simple object oriented API.</p>
<h2 id="<!-more_->">]]>
    
    </summary>
    
      <category term="Android" scheme="http://walk-code.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rxjava入门]]></title>
    <link href="http://walk-code.github.io/2016/04/12/Rxjava%E5%85%A5%E9%97%A8/"/>
    <id>http://walk-code.github.io/2016/04/12/Rxjava入门/</id>
    <published>2016-04-12T15:27:10.000Z</published>
    <updated>2016-05-04T13:24:03.621Z</updated>
    <content type="html"><![CDATA[<p><strong>传送门</strong> <a href="https://mcxiaoke.gitbooks.io/rxdocs/content/" target="_blank" rel="external">RxJava中文翻译</a>亦或<a href="http://reactivex.io/" target="_blank" rel="external">RxJava官方文档</a></p>
<h3 id="1-为什么要用RxJava">1.为什么要用RxJava</h3><p>这里引用一段<a href="https://realm.io/cn/news/kau-felipe-lima-adopting-rxjava-airbnb-android/" target="_blank" rel="external">Airbnb Developer</a>的一段话:</p>
<p>我们都知道 移动开发是困难的。移动用户期望即时响应，而且还有在不同的线程间来回切换的需求。除了主线程，你还要做网络连接，同时你还需要在后台处理其他的各种不同的事情。最重要的是，你不能阻塞 UI 线程。<br><a id="more"></a><br>RxJava 是解决这类问题的好方法，因为他能够使得线程间的切换比较容易。这已经集成在框架里面了。异步操作非常笨重而且容易出错，RxJava 使得你不用再这样做了，这也是你能把不同的线程组合在一起的原因。</p>
<p>我们需要 RxJava 的真正原因其实是 我们的软件很烂。为什么我们有如此多的 bug？为什么我们需要 crash 报告工具来跟踪我们成千上万的 crash，或者多少用户已经对我们生气了？这里可能有些什么事情不对劲。</p>
<p>我们需要改变；我觉得 imperative 编程是我们不应该采用的方法。当然，面向对象编程已经流行很多年了。它已经深入到了现代程序员的骨髓里了。每个人都盲目的使用它，但是它不是我们开发软件的必需品。</p>
<p>Functional 编程是 RxJava 里面的概念，而且我觉得用这种方法，代码更加健壮，而且永远不需要维护状态了。代码更加可靠而且你知道它一定工作。</p>
<p>底线：我们的问题是我们写了很多糟糕的代码，移动开发也是很困难的，而 RxJava 是解决这个问题的一个方案。</p>
<h3 id="2-什么是RxJava">2.什么是RxJava</h3><p>官方简介:</p>
<p>ReactiveX is a combination of the best ideas from the Observer pattern, the Iterator pattern, and functional programming.</p>
<p><img src="http://ww1.sinaimg.cn/large/005yEbTbgw1f2wongssb4j30u20ccabm.jpg" alt=""></p>
<p>废话不多说先来个Hello World.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//基本Observable</span><br><span class="line">Observable myObservable = Observable.create(new Observable.OnSubscribe() &#123;</span><br><span class="line"></span><br><span class="line">		public void call(Object sub) &#123;</span><br><span class="line">			((Subscriber)sub).onNext(<span class="string">"Hello World"</span>);</span><br><span class="line">			((Subscriber)sub).onCompleted();</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;); </span><br><span class="line"></span><br><span class="line">//被消费</span><br><span class="line">Subscriber subscriber = new Subscriber() &#123;</span><br><span class="line"></span><br><span class="line">		public void onCompleted() &#123;</span><br><span class="line">						</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		public void onError(Throwable arg0) &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		public void onNext(Object arg0) &#123;</span><br><span class="line">			System.out.println((String)arg0);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;;</span><br><span class="line">//上面代码所做的工作就是打印由Observable发送的字符串。现在我们有了myObservable和mySubscriber，就可以通过subscribe()函数把两者关联起来：	</span><br><span class="line">myObservable.subscribe(mySubscriber);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结合Jvav8的新特效代码会变得更加的简洁</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Observable observable = (Observable) Observable.just("Hello World").subscribe(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>传送门</strong> <a href="https://mcxiaoke.gitbooks.io/rxdocs/content/">RxJava中文翻译</a>亦或<a href="http://reactivex.io/">RxJava官方文档</a></p>
<h3 id="1-为什么要用RxJava">1.为什么要用RxJava</h3><p>这里引用一段<a href="https://realm.io/cn/news/kau-felipe-lima-adopting-rxjava-airbnb-android/">Airbnb Developer</a>的一段话:</p>
<p>我们都知道 移动开发是困难的。移动用户期望即时响应，而且还有在不同的线程间来回切换的需求。除了主线程，你还要做网络连接，同时你还需要在后台处理其他的各种不同的事情。最重要的是，你不能阻塞 UI 线程。<br>]]>
    
    </summary>
    
      <category term="笔记" scheme="http://walk-code.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git 项目上传步骤]]></title>
    <link href="http://walk-code.github.io/2016/01/18/git-%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E6%AD%A5%E9%AA%A4/"/>
    <id>http://walk-code.github.io/2016/01/18/git-项目上传步骤/</id>
    <published>2016-01-18T14:19:51.000Z</published>
    <updated>2016-05-08T07:54:52.898Z</updated>
    <content type="html"><![CDATA[<p>先初始化Git:<br><code>Git Bash</code></p>
<blockquote>
<ul>
<li><code>git config --global user.name &quot;Your Real Name&quot;</code>    //github的名字</li>
<li><code>git config --global user.email you@email.address</code> //github的账号</li>
</ul>
</blockquote>
<p>上传文件到GitHub，需要一个SSH的密钥，在shell中输入ssh-keygen -C ‘your@email.address’ -t rsa 会出现让你输入SSH密钥的存放位置，这个可以不用理会，直接回车使用默认路径。接着就是你想要的密码，SSHkey就生成了。找到SSH密钥存放的位置，打开id_rsa.pub复制里面的内容（notepad++或者记事本打开）原封不动的复制，接着直接在打开GitHub，添加add SSH key。<br><a id="more"></a><br>做完这些可以说已经基本配置完成了，现在就可以上传自己的代码了，在你想上传的文件的下先<code>git init here</code>也可以在GitBash中进入这个文件，输入<code>git init</code></p>
<blockquote>
<ul>
<li><code>git add</code> 选择你要添加到仓库的文件.</li>
<li><code>git commit -m &#39;first commit&#39;</code> 添加到仓库。</li>
</ul>
</blockquote>
<p><strong>-m</strong> 后面跟参数说明，将代码提交到GitHub会在代码文件信息上显示这个说明。</p>
<blockquote>
<ul>
<li><code>git remote add origin git@github.com:XXX/XXX.git</code></li>
<li><code>git push -u origin master</code>完成上传。</li>
</ul>
</blockquote>
<p>一些可能遇到的问题解决方式：</p>
<blockquote>
<ul>
<li><code>git remote add origin</code></li>
<li><code>git@github.com:djqiang（github帐号名）/gitdemo（项目名）.git</code></li>
</ul>
</blockquote>
<p>提示出错信息：fatal: remote origin already exists.<br>解决办法如下：</p>
<blockquote>
<ol>
<li>先输入<code>git remote rm origin</code> </li>
<li>再输入<code>git remote add origin git@github.com:djqiang/gitdemo.git</code> 就不会报错了！ </li>
<li>如果输入<code>git remote rm origin</code><br>还是报错的话，error: Could not remove config section ‘remote.origin’.<br>我们需要修改gitconfig文件的内容.</li>
<li>找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc</li>
<li>找到一个名为gitconfig的文件，打开它把里面的[remote “origin”]那一行删掉就好了！</li>
</ol>
</blockquote>
<p>如果输入<code>ssh -T git@github.com</code><br>出现错误提示：Permission denied (publickey). 因为新生成的key不能加入ssh就会导致连接不上github。<br>解决办法如下：</p>
<blockquote>
<ol>
<li>先输入<code>ssh-agent</code>，再输入<code>ssh-add ~/.ssh/id_key</code>，这样就可以了。</li>
<li>如果还是不行的话，输入<code>ssh-add ~/.ssh/id_key</code> 命令后出现报错Could not open a connection to your authentication agent.解决方法是key用Git<br>Gui的ssh工具生成，这样生成的时候key就直接保存在ssh中了，不需要再ssh-add命令加入了，其它的user，token等配置都用命令行来做。</li>
<li>最好检查一下在你复制id_rsa.pub文件的内容时有没有产生多余的空格或空行，有些编辑器会帮你添加这些的。</li>
</ol>
</blockquote>
<p>如果输入<code>git push origin master</code><br>提示出错信息：error:failed to push som refs to …….<br>解决办法如下：</p>
<blockquote>
<ol>
<li>先输入<code>git pull origin master</code> //先把远程服务器github上面的文件拉下来 </li>
<li>再输入<code>git push origin master</code></li>
<li>如果出现报错 fatal: Couldn’t find remote ref<br>master或者fatal: ‘origin’ does not appear to be a git repository以及fatal:<br>Could not read from remote repository. </li>
<li>则需要重新输入<code>git remote add origingit@github.com:djqiang/gitdemo.git</code> </li>
</ol>
</blockquote>
<p>其他问题解决方式可以参考：<br><a href="http://stackoverflow.com/questions/16128018/git-commit-and-automatically-add-all-untracked-files" target="_blank" rel="external">http://stackoverflow.com/questions/16128018/git-commit-and-automatically-add-all-untracked-files</a><br><a href="http://stackoverflow.com/questions/4181861/src-refspec-master-does-not-match-any-when-pushing-commits-in-git" target="_blank" rel="external">http://stackoverflow.com/questions/4181861/src-refspec-master-does-not-match-any-when-pushing-commits-in-git</a></p>
<p>另外提供一个Git简易使用说明：<a href="http://www.bootcss.com/p/git-guide/" target="_blank" rel="external">http://www.bootcss.com/p/git-guide/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>先初始化Git:<br><code>Git Bash</code></p>
<blockquote>
<ul>
<li><code>git config --global user.name &quot;Your Real Name&quot;</code>    //github的名字</li>
<li><code>git config --global user.email you@email.address</code> //github的账号</li>
</ul>
</blockquote>
<p>上传文件到GitHub，需要一个SSH的密钥，在shell中输入ssh-keygen -C ‘your@email.address’ -t rsa 会出现让你输入SSH密钥的存放位置，这个可以不用理会，直接回车使用默认路径。接着就是你想要的密码，SSHkey就生成了。找到SSH密钥存放的位置，打开id_rsa.pub复制里面的内容（notepad++或者记事本打开）原封不动的复制，接着直接在打开GitHub，添加add SSH key。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[过程]]></title>
    <link href="http://walk-code.github.io/2015/12/06/%E8%BF%87%E7%A8%8B/"/>
    <id>http://walk-code.github.io/2015/12/06/过程/</id>
    <published>2015-12-06T14:27:34.000Z</published>
    <updated>2016-05-08T07:55:08.762Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>杂文</li>
</ul>
</blockquote>
<p>11月匆匆就这样子过去了，总体来说过得还算的上是充实，在工作上所面临的问题基本上就可以处理好。有时候过分的追求功能忽略了用户体验也是一件很糟糕的事，毕竟用户一看到一个”不友好”的界面，就会立马的删除掉，除了非常需要这个App除外。<br><a id="more"></a><br>最近一直都在忙这个项目，希望它能早日的上线，把程序里所有的BUG都消灭掉，在把自己的代码优化了，之前看到一篇Blog，讲到不要盲目的去优化自己的代码，在保证其功能实现并且没有任何BUG的情况下，才好进行优化，这样才不会造成越来越多的错误，一定要注意自己的开发的效率，有时候一个 问题困扰自己太久，你可以选择把它给记下来，我是用印象笔记的，有一些知识点比较稀疏的也可以用它记下来，有事没事多翻翻也就OK了。</p>
<p>拥有一个强大的身体才是，你能编程的前提，保证好自己每天的运动量，也就能好好的撸码了。最近在收集一下android的技能树，让自己的技能树更  加的完善起来。</p>
<p><img src="http://ww3.sinaimg.cn/large/005yEbTbgw1eyqbtb3zy5j30jx1n1wlq.jpg" alt="cmd-markdown-logo">    </p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>杂文</li>
</ul>
</blockquote>
<p>11月匆匆就这样子过去了，总体来说过得还算的上是充实，在工作上所面临的问题基本上就可以处理好。有时候过分的追求功能忽略了用户体验也是一件很糟糕的事，毕竟用户一看到一个”不友好”的界面，就会立马的删除掉，除了非常需要这个App除外。<br>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://walk-code.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android传递对象的三种方式]]></title>
    <link href="http://walk-code.github.io/2015/11/10/Android%E4%BC%A0%E9%80%92%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F(%E8%BD%AC)/"/>
    <id>http://walk-code.github.io/2015/11/10/Android传递对象的三种方式(转)/</id>
    <published>2015-11-10T14:52:15.000Z</published>
    <updated>2016-10-10T05:18:12.730Z</updated>
    <content type="html"><![CDATA[<p>在Android中，Activity和Fragment、Activity和Fragment之间传递对象，可以通过对象序列化存入Intent,Bundle进行传递，也可以通过将对象转化成Json字符串，进行传递。<br>对象的序列化也可以通过使用Java的’Serializable’的接口、’Parcelable’接口(Android)。转化成’Json字符串’，可以使用Gson的类库。<br><a id="more"></a></p>
<h2 id="Serializable">Serializable</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Goods implements Serializable&#123;</span><br><span class="line">    private String images;</span><br><span class="line">	private String goods_name;</span><br><span class="line">	private double price;</span><br><span class="line">	private int stock;</span><br><span class="line">	private String details;</span><br><span class="line">	//setting&amp;getting method</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>传递数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Goods goods = new Goods();</span><br><span class="line">goods.setImages(...);</span><br><span class="line">goods.setPrice(...);</span><br><span class="line">       ....</span><br><span class="line">Intent intent = new Intent(this,Activity);</span><br><span class="line">intent.putExtra(<span class="string">"goods"</span>,goods);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure>
<p>接收数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Goods goods = getIntent().getSerializableExtra(<span class="string">"goods"</span>);</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></p>
<h3 id="Json字符串">Json字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Goods goods = new Goods();</span><br><span class="line">goods.setImages(...);</span><br><span class="line">goods.setPrice(...);</span><br><span class="line">       ....</span><br><span class="line">Intent intent = new Intent(this,Activity);</span><br><span class="line">intent.putExtra(<span class="string">"goods"</span>,new Gson().toJson(goods</span><br><span class="line">startActivity();</span><br></pre></td></tr></table></figure>
<p>接收数据<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> String bookJson=getIntent().getStringExtra("book");</span><br><span class="line"> Book book=new Gson().fromJson(bookJson,Book.class);</span><br><span class="line">``` </span><br><span class="line">### Parcelable</span><br><span class="line"></span><br><span class="line">实现'Parcelable'接口需要实现两个方法</span><br><span class="line"></span><br><span class="line">describeContents方法。内容接口描述，通常返回0;</span><br><span class="line"></span><br><span class="line">writeToParce方法。将传递的数据打包到Parcel容器中。</span><br><span class="line"></span><br><span class="line">除了要实现这两个方法还必须创建一个'Parcelable.Creator'接口的实例，用于读取Parcel容器中的数据。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">public class Goods implements Parcelable&#123;</span><br><span class="line">    private String images;</span><br><span class="line">	private String goods_name;</span><br><span class="line">	private double price;</span><br><span class="line">	private int stock;</span><br><span class="line">	private String details;</span><br><span class="line">	//setting&amp;getting </span><br><span class="line">	</span><br><span class="line">	 @Override</span><br><span class="line">    public int describeContents() &#123;</span><br><span class="line"> </span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void writeToParcel(Parcel dest, int flags) &#123;</span><br><span class="line">        //该方法将类的数据写入外部提供的Parcel中.即打包需要传递的数据到Parcel容器保存，</span><br><span class="line">        // 以便从parcel容器获取数据</span><br><span class="line">        dest.writeString(name);</span><br><span class="line">        dest.writeInt(id);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    public static final Creator&lt;Goods&gt; CREATOR=new Creator&lt;Goods&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Goods createFromParcel(Parcel source) &#123;</span><br><span class="line">            //从Parcel容器中读取传递数据值，封装成Parcelable对象返回逻辑层。</span><br><span class="line">            Goods goods = new Goods();</span><br><span class="line">            goods.setGoods_Name(source.readString());</span><br><span class="line">            goods.setPrice(source.readDouable());</span><br><span class="line">			    ...</span><br><span class="line">            return goods;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        @Override</span><br><span class="line">        public Author[] newArray(int size) &#123;</span><br><span class="line">            //创建一个类型为T，长度为size的数组，仅一句话（return new T[size])即可。方法是供外部类反序列化本类数组使用。</span><br><span class="line">            return new Goods[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>传递数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Goods goods = new Goods();</span><br><span class="line">goods.setImages(...);</span><br><span class="line">goods.setPrice(...);</span><br><span class="line">       ....</span><br><span class="line">Intent intent = new Intent(this,Activity);</span><br><span class="line">intent.putExtra(<span class="string">"goods"</span>,goods);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p>
<p>接收数据</p>
<pre><code class="python">Goods goods = getIntent().getParcelableExtra(<span class="string">"book"</span>);
.....
</code></pre>
<p>同样的是对对象进行序列化，’Serializable’与’Parcelable’有哪些区别。</p>
<h3 id="Serializable与Parcelable区别">Serializable与Parcelable区别</h3><p>先看看这张图:<br><img src="http://www.jcodecraeer.com/uploads/20150104/1420344818993474.png" alt="file-list"><br>消耗的时间关系 字符串&gt;Serializable&gt;Parcelable ,从性能上看我们会优先选择’Parcelable’,从上面代码可以看出使用’Parcelable’有大量重复的模板代码。</p>
<h3 id="简化Parcel操作">简化Parcel操作</h3><p>如果你使用android Studio 可以通过安装android-parcelable-intellij-plugin插件，或者自己配置模板进行操作。</p>
<h3 id="区别"><a href="http://greenrobot.me/devpost/android-parcelable-serializable/" target="_blank" rel="external">区别</a></h3><p>‘Serializable is a standard Java interface. You simply mark a class Serializable by implementing the interface, and Java will automatically serialize it in certain situations.</p>
<p>Parcelable is an Android specific interface where you implement the serialization yourself. It was created to be far more efficient that Serializable, and to get around some problems with the default Java serialization scheme.</p>
<p>I believe that Binder and AIDL work with Parcelable objects.</p>
<p>However, you can use Serializable objects in Intents’<br>上文的意思指Serializable是java提供的接口，Parcelable是Google提供的接口,在AIDL(Android内部进程通讯接口)和Binder(进程通讯机制)中会用到Parcelable，无论怎样’Serializable’对象都能在Intent中使用。 Serializable简单易用，Parcelable速度至上</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Android中，Activity和Fragment、Activity和Fragment之间传递对象，可以通过对象序列化存入Intent,Bundle进行传递，也可以通过将对象转化成Json字符串，进行传递。<br>对象的序列化也可以通过使用Java的’Serializable’的接口、’Parcelable’接口(Android)。转化成’Json字符串’，可以使用Gson的类库。<br>]]>
    
    </summary>
    
      <category term="笔记" scheme="http://walk-code.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
